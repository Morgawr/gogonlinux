#!/usr/bin/env python
""" Executable with cli interface for the gogonlinux project. """

import sys
import getopt
import os
import subprocess
import shutil
import getpass
import tempfile
import signal
from distutils import dir_util

from gog_utils import gog_conn
from gog_utils import gol_connection as site_conn
from gog_utils import gog_db
from gog_utils import version
from gog_utils import gog_settings

class Usage(Exception):
    """ Just a class for the Usage type of exception. """
    def __init__(self, msg):
        self.msg = msg

general_path = os.path.join(os.getenv("HOME"),".gog-tux")
database_path = os.path.join(general_path,"db.json")
deletesetup = False
setup = ""
path = ""
db_entry = ""


def handle_install_interrupt(signal, frame):
    """ Function that reacts to interrupt signal during game installation. """
    global setup
    global deletesetup
    global path
    global database_path

    print "Process is being terminated..."
    if deletesetup and setup != "":
        print "Removing previously created files..."
        os.remove(setup)
    
    if path != "":
        print "Removing target directory"
        shutil.rmtree(path)

    if db_entry != "":
        print "Checking database consistency"
        game_id = db_entry
        database = gog_db.GogDatabase(database_path)
        if database.has_game(game_id):
            install_script = database[game_id].install_script_file
            uninstall_script = database[game_id].uninstall_script_file
            if os.path.exists(install_script):
                os.remove(install_script)
            if os.path.exists(uninstall_script):
                os.remove(uninstall_script)
            database.remove_game(game_id)
            database.store()
    print "Process successfully terminated."
    os._exit(2)
        

def print_usage():
    """ Print how to use the program. """
    print "Usage: gog-installer [OPTIONS] [COMMAND] [game_id]"
    print ("       This program is to be used as a downloader+installer"
          " for gogonlinux.com games.\n"
          "       Typically you will want to run this through the"
          " gog-tux graphical interface\n"
          "       instead of the command line directly.\n"
          "       Read the manpage for all the available options.\n"
          "       The following are the available commands:\n"
          "       -h/--help will show this info text again\n"
          "       -u/--uninstall is used if you want to uninstall a previously "
          "installed game\n"
          "       -r/--run is used to launch the game from the command line "
          "without having to move into the target's directory\n"
          "       --version prints version details for this software\n"
          "       --list shows the list of installed games and their pathname\n"
          "       --available shows all the available games on gogonlinux.com")

def show_version():
    """ Print the version and data related to the program. """
    print "gog-installer application version %s" % version.version
    print "developed by %s <%s>" % (version.author, version.email)
    print "see more info with the --help flag"

def main(argv=None):
    """ Entry point. """
    #first we set up unbuffered output in case we need to print to GUI (gog-tux)
    unbuffered = os.fdopen(sys.stdout.fileno(), 'w', 0)
    sys.stdout.close()
    sys.stdout = unbuffered
    if not os.path.exists(os.path.join(os.getenv("HOME"), ".gog-tux")):
        os.makedirs(os.path.join(os.getenv("HOME"),".gog-tux"))
    if argv is None:
        argv = sys.argv
    try:
        try: 
            opts, args = getopt.getopt(argv[1:], "hufrp", 
                                       ["help","token=","secret=","uninstall",
                                        "run","install-path=","setup=","beta",
                                        "version","list","available","force",
                                        "private-repo="])
        except getopt.error, msg:
            raise Usage(msg)
        settings = {}
        global setup
        global db_entry
        
        # 0 = install
        # 1 = uninstall
        # 2 = launch
        operation = 0
        for o, a in opts:
            if o in ("-h", "--help"):
                print_usage()
                return 0
            elif o == "--token":
                settings["token"] = a
            elif o == "--secret":
                settings["secret"] = a
            elif o == "--install-path":
                settings["install_path"] = a
            elif o in ("-u", "--uninstall"):
                operation = 1
            elif o in ("-r", "--run"):
                operation = 2
            elif o in ("--setup"):
                settings["setup_file"] = a
            elif o in ("--beta"):
                settings["beta"] = True
            elif o in ("--version"):
                show_version()
                return
            elif o in ("--list"):
                settings["show_list"] = True
            elif o in ("--available"):
                settings["show_avail"] = True
            elif o in ("--force", "-f"):
                settings["force"] = True
            elif o in ("--private-repo"):
                settings["repository"] = a
        if "show_list" in settings and settings["show_list"] == True:
            print_list()
            return
        if "show_avail" in settings and settings["show_avail"] == True:
            print_avail(settings)
            return
        if len(args) == 0:
            raise Usage("Wrong number of arguments, you need at least "
                        "the id of the game you wish to install/uninstall")
        global general_path
        global database_path
        game_id = args[0]
        database = gog_db.GogDatabase(database_path)
        database.update()
        if operation == 0:
            do_install(game_id, database, settings)
        else:
            if not database.has_game(game_id):
                raise Usage("Game is not installed in the current database")
            if operation == 1:
                do_uninstall(game_id, database)
            elif operation == 2:
                do_launch(game_id, database)

    except Usage, err:
        print >> sys.stderr, err.msg
        print >> sys.stderr, "    for help use --help"
        return 2
    return 0

def do_install(game_id, database, settings):
    """ Execute the install process given the game's id. """
    global path
    global setup
    global db_entry
    global deletesetup
    config = gog_settings.GogSettings(general_path)
    if database.has_game(game_id):
        raise Usage("Game is already installed in the database "
                    "at %s " % database.games[game_id].install_path)
    if "install_path" in settings:
        path = settings["install_path"]
    else:
        path = os.path.join(config.data["install_path"], game_id)
    # Check if the game is supported by the gogonlinux project
    if "beta" in settings:
        beta = settings["beta"]
    else:
        beta = False
    if "force" in settings:
        force = settings["force"]
    else:
        force = False
    if "repository" in settings:
        repo = settings["repository"]
    else:
        repo = None
    data = site_conn.obtain_available_games(beta, repo)
    if game_id not in data:
        if not force:
           raise Usage("Game is not currently supported by the gogonlinux "
                       "project.")
        game_data = site_conn.generate_dummy_data(game_id)
    else:
        game_data = data[game_id]
        if repo is not None:
            game_data["private_repository"] = '1'
            game_data["repository_url"] = repo
    signal.signal(signal.SIGINT, handle_install_interrupt)
    if "setup_file" not in settings or settings["setup_file"] == "":
        # We need to ask for username and password instead
        if (("token" not in settings or settings["token"] == "") and
           ("secret" not in settings or settings["secret"] == "")):
            email = raw_input("gog.com email address: ")
            password = getpass.getpass()
            is_user = True
        else:
            token = settings["token"]
            secret = settings["secret"]
            is_user = False
        conn = gog_conn.GogConnection()
        if is_user:
            try:
                conn.connect(email, password)
            except:
                raise Usage("Login failed. Be sure you are connected to the "
                            "internet and that your email and password"
                            " are correct and working")
        else:
            conn.set_auth_token(token, secret)
        print "Retrieving installer..."
        deletesetup = True
        try:
            setup = conn.download_game(game_id, tempfile.gettempdir())
        except Exception as err:
            if "403" in str(err):
                print ("You do not have the permissions to download this "
                       "software from gog.com")
                return 3
            raise err
    else:
        deletesetup = False
        # let's create path for setup file
        setup = settings["setup_file"]
        if setup[0] != "/":
            setup = os.path.join(os.getcwd(),setup)
        if not os.path.exists(setup):
            raise Usage("The file %s does not exist." % setup)
    print "Extracting data..."
    os.makedirs(path)
    command = "cd %s && innoextract -q %s" % (path, setup)
    #let's extract the file
    shell = subprocess.Popen(["sh"], stdin=subprocess.PIPE, 
                             stdout=subprocess.PIPE)
    shell.stdin.write(command+"\n")
    shell.communicate()
    # TODO: we should check the return value of the script to make sure
    #       it worked fine else problems might ensue
    shell.stdin.close()
    if os.path.exists(os.path.join(path, "tmp")):
        shutil.rmtree(os.path.join(path, "tmp"))
    dir_util.copy_tree(os.path.join(path, "app"), path)
    shutil.rmtree(os.path.join(path, "app"))
    if deletesetup:
        os.remove(setup)
    print "Updating local database..."
    # Now we need to update the local database and
    # download the install/uninstall scripts
    db_entry = game_id
    game = gog_db.GameRecord(game_data["title"], game_data)
    # Let's download the install/uninstall scripts
    print "Retrieving game scripts from repository..."
    if not os.path.exists(os.path.join(general_path,"scripts")):
        os.makedirs(os.path.join(general_path, "scripts"))
    # XXX: All these "install_script"/"install_path" variable names
    #      are confusing, might go back to it and rename
    install_script = os.path.join(general_path, "scripts",
                                  "install_%s" % game_id)
    uninstall_script = os.path.join(general_path, "scripts",
                                    "uninstall_%s" % game_id)
    launch_script = os.path.join(path, "startgame.sh")
    game.install_script_file = install_script
    game.uninstall_script_file = uninstall_script
    game.install_path = path
    game.online_id = game_id
    if game.install_script != "404":
        site_conn.download_script(install_script, 
                                  game.install_script)
    if game.uninstall_script != "404":
        site_conn.download_script(uninstall_script, 
                                  game.uninstall_script)
    if game.launch_script != "404":
        site_conn.download_script(launch_script, 
                                  game.launch_script)
    database.update()
    database.add_game(game_id, game)
    database.store()
    # then we need to run the install script on the target's directory
    if os.path.exists(database.games[game_id].install_script_file):
        print "Executing install script..."
        subprocess.call("%s %s" % (database.games[game_id].install_script_file,
                              database.games[game_id].install_path), shell=True)
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    print "Done."
    print "%s installed in %s" % (database.games[game_id].full_name, path)

def do_uninstall(game_id, database):
    """ Execute the uninstall process given the game's id. """
    print "Running uninstall script..."
    path = database.games[game_id].install_path
    if (database.games[game_id].uninstall_script != "404" and
       os.path.exists(database.games[game_id].uninstall_script_file)):
        subprocess.call("%s %s" % (database.games[game_id].uninstall_script_file,
                              database.games[game_id].install_path), shell=True)
    print "Removing remaining files..."
    shutil.rmtree(path)
    if os.path.isfile(database.games[game_id].install_script_file):
        os.unlink(database.games[game_id].install_script_file)
    if os.path.isfile(database.games[game_id].uninstall_script_file):
        os.unlink(database.games[game_id].uninstall_script_file)
    print "Updating database..."
    name = database.games[game_id].full_name
    database.update()
    database.remove_game(game_id)
    database.store()
    print "%s has been successfully removed." % name 

def do_launch(game_id, database):
    """ Launch a game from the installed games local database. """
    game = database.games[game_id]
    if game.private == '1' and game.repo_url == "forced":
        print ("Game comes from a forced install, unable to launch it "
              "automatically.")
        return
    startup = os.path.join(game.install_path,"startgame.sh")
    subprocess.Popen([startup])       

def print_list():
    """ Print a list with all the installed games. """
    database = gog_db.GogDatabase(database_path)
    database.update()
    for k in database.games:
        print " ----------- "
        print "Game ID: %s" % k 
        print "Game Title: %s" % database.games[k].full_name
        print "Install Path: %s" % database.games[k].install_path
    print " ----------- "

def print_avail(settings):
    """ Print a list of all the available games on gogonlinux.com. """
    if "beta" in settings and settings["beta"] == True:
        beta = True
    else:
        beta = False
    data = site_conn.obtain_available_games(beta)
    for k in data:
        print " ----------- "
        print "Game ID: %s" % k
        print "Game Title: %s" % data[k]["title"]
        if beta:
            print "Beta Status: %s" % ("No " if data[k]["released"] == "1" 
                                       else "Yes" )
    print " ----------- "

if __name__ == "__main__":
    sys.exit(main())
